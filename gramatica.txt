

*** PROGRAMA
PROGRAMA -> Programa ID ; DEC_VARS DEC_FUNC PRINCIPAL
PROGRAMA -> Programa ID ; DEC_FUNC PRINCIPAL
PROGRAMA -> Programa ID ; DEC_VARS PRINCIPAL
PROGRAMA -> Programa ID ; PRINCIPAL

*** PRINCIPAL
PRINCIPAL -> principal () BLOQUE

*** DECLARACION DE VARIABLES
DEC_VARS -> variables DEC_VAR_AUX DOTS TIPO SEMICOLON DEC_VARS
DEC_VARS -> variables DEC_VAR_AUX DOTS TIPO SEMICOLON

DEC_VAR_AUX -> ID COMMA DEC_VAR_AUX
DEC_VAR_AUX -> ID

*** PARAMETROS
PARAMETROS -> ID COMMA TIPO COMMA PARAMETROS
PARAMETROS -> ID COMMA TIPO

*** DEC_FUNC
DEC_FUNC -> TIPO funcion ID (VARS) ; DEC_VARS BLOQUE
DEC_FUNC -> TIPO funcion ID (VARS) ; BLOQUE
DEC_FUNC -> TIPO funcion ID () ; DEC_VARS BLOQUE
DEC_FUNC -> TIPO funcion ID () ; BLOQUE

*** BLOQUE
BLOQUE -> { BLOQUE_AUX }
BLOQUE -> { }

BLOQUE_AUX -> ESTATUTO BLOQUE_AUX
BLOQUE_AUX -> ESTATUTO


*** ESTATUTO
ESTATUTO -> FUNCION
ESTATUTO -> ASIGNACION
ESTATUTO -> RETORNO
ESTATUTO -> ESCRITURA
ESTATUTO -> LECTURA
ESTATUTO -> DECISION
ESTATUTO -> REPETICION

*** RETORNO
RETORNO -> regresa ( EXPRESION ) ;

*** ESCRITURA
ESCRITURA -> escribe ( escritura_aux ) ;

ESCRITURA_AUX -> expresion , ESCRITURA_AUX
ESCRITURA_AUX -> string , ESCRITURA_AUX
ESCRITURA_AUX -> expresion
ESCRITURA_AUX -> string 

*** LECTURA 
LECTURA -> lee ( lectura_aux ) ;

LECTURA_AUX -> ID , LECTURA_AUX
LECTURA_AUX -> ID

*** DECISION
DECISION -> si ( EXPRESION ) entonces BLOQUE sino BLOQUE
DECISION -> si ( EXPRESION ) entonces BLOQUE

*** REPETION
REPETICION -> mientras ( EXPRESION ) hacer BLOQUE
REPETICION -> desde ID = EXPRESION  hasta  EXPRESION hacer BLOQUE


*** FUNCION
FUNCION -> ID ( FUNCION_AUX ) SEMICOLON

FUNCION_AUX -> EXPRESION , FUNCION_AUX
FUNCION_AUX -> EXPRESION

*** ASIGNACION
ASIGNACION -> ID = EXPRESION ;
ASIGNACION -> ID = FUNCION ASIGNACION_AUX;
ASIGNACION -> ID = FUNCION ;

ASIGNACION_AUX -> EXPRESION ASIGNACION_AUX
ASIGNACION_AUX -> EXPRESION


*** EXPRESION
EXPRESION -> EXPRESION OP_LOG SUPER_EXP
EXPRESION -> EXPRESION

**