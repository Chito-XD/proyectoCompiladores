

PROGRAMA -> Programa id ; DEC_CLAS DEC_VARS DEC_FUNC PRINCIPAL
         -> Programa id ; DEC_CLAS DEC_VARS PRINCIPAL
         -> Programa id ; DEC_CLAS DEC_FUNC PRINCIPAL
         -> Programa id ; DEC_CLAS PRINCIPAL
         -> Programa id ; DEC_VARS DEC_FUNC PRINCIPAL
         -> Programa id ; DEC_VARS PRINCIPAL
         -> Programa id ; DEC_FUNC PRINCIPAL
         -> Programa id ; PRINCIPAL

PRINCIPAL -> principal () BLOQUE

DEC_CLAS -> Clase id hereda id { ATRIBUTOS METODOS }
         -> Clase id hereda id { ATRIBUTOS }
         -> Clase id hereda id { METODOS }
         -> Clase id hereda id { }
         -> Clase id { ATRIBUTOS METODOS }
         -> Clase id { ATRIBUTOS }
         -> Clase id { METODOS }
         -> Clase id { }
         -> Clase id hereda id { ATRIBUTOS METODOS } DEC_CLAS
         -> Clase id hereda id { ATRIBUTOS } DEC_CLAS
         -> Clase id hereda id { METODOS } DEC_CLAS
         -> Clase id hereda id { } DEC_CLAS
         -> Clase id { ATRIBUTOS METODOS } DEC_CLAS
         -> Clase id { ATRIBUTOS } DEC_CLAS
         -> Clase id { METODOS } DEC_CLAS
         -> Clase id { } DEC_CLAS

ATRIBUTOS -> atributos : DEC_VARS_AUX

METODOS -> metodos : dec_func

DEC_VARS -> variables : dec_vars_aux

DEC_CLAS_AUX -> dec_var_aux2 : TIPO_SIMPLE ; dec_vars_aux
             -> dec_var_aux2 : TIPO_SIMPLE ;
             -> dec_var_aux2 : TIPO_COMPUESTO ; dec_vars_aux
             -> dec_var_aux2 : TIPO_COMPUESTO ;

DEV_VARS_AUX2 -> VAR , DEV_VARS_AUX2
              -> VAR

VAR -> id [ cte_i ] [ cte_i ]
    -> id [ cte_i ]
    -> id

PARAMETROS -> ID : TIPO_SIMPLE , PARAMETROS
           -> ID : TIPO_SIMPLE

DEC_FUNC -> TIPO_SIMPLE funcion id ( PARAMETROS ) ; DEC_VARS BLOQUE
         -> TIPO_SIMPLE funcion id ( PARAMETROS ) ; BLOQUE
         -> TIPO_SIMPLE funcion id ( PARAMETROS ) ; DEC_VARS BLOQUE DEC_FUNC
         -> TIPO_SIMPLE funcion id ( PARAMETROS ) ; BLOQUE DEC_FUNC
         -> TIPO_SIMPLE funcion id ( ) ; DEC_VARS BLOQUE
         -> TIPO_SIMPLE funcion id ( ) ; BLOQUE
         -> TIPO_SIMPLE funcion id ( ) DEC_VARS BLOQUE DEC_FUNC
         -> TIPO_SIMPLE funcion id ( ) ; BLOQUE DEC_FUNC
         -> VOID funcion id ( PARAMETROS ) ; DEC_VARS BLOQUE
         -> VOID funcion id ( PARAMETROS ) ; BLOQUE
         -> VOID funcion id ( PARAMETROS ) ; DEC_VARS BLOQUE DEC_FUNC
         -> VOID funcion id ( PARAMETROS ) ; BLOQUE DEC_FUNC
         -> VOID funcion id ( ) ; DEC_VARS BLOQUE
         -> VOID funcion id ( ) ; BLOQUE
         -> VOID funcion id ( ) DEC_VARS BLOQUE DEC_FUNC
         -> VOID funcion id ( ) ; BLOQUE DEC_FUNC

BLOQUE -> { BLOQUE_AUX }
       -> { }

BLOQUE_AUX -> ESTATUTO BLOQUE_AUX
           -> ESTATUTO


ESTATUTO -> FUNCION ;
         -> ASIGNACION
         -> RETORNO
         -> ESCRITURA
         -> LECTURA
         -> DECISION
         -> REPETICION

ASIGNACION -> VARIABLE = SUPER_EXP ;

FUNCION -> id ( FUNCION_AUX )
        -> id ( ) 

FUNCION_AUX -> SUPER_EXP , FUNCION_AUX
            -> SUPER_EXP

RETORNO -> regresa ( SUPER_EXP ) ;

ESCRITURA -> escribe ( escritura_aux ) ;

ESCRITURA_AUX -> SUPER_EXP , ESCRITURA_AUX
              -> SUPER_EXP

LECTURA -> lee ( lectura_aux ) ;

LECTURA_AUX -> variable , LECTURA_AUX
            -> variable

LECTURA_AUX_VARS -> CLASS_VAR
LECTURA_AUX_VARS -> ID

DECISION -> si ( SUPER_EXP ) entonces BLOQUE sino BLOQUE
         -> si ( SUPER_EXP ) entonces BLOQUE

REPETICION -> mientras ( SUPER_EXP ) hacer BLOQUE
REPETICION -> desde id = SUPER_EXP  hasta  SUPER_EXP hacer BLOQUE

TIPO_SIMPLE -> ENTERO
            -> FLOTANTE
            -> CHAR
            -> BOOLEAN
        
TIPO_COMPUESTO -> id

SUPER_EXP -> EXPRESION OP_LOG SUPER_EXP
          -> EXPRESION

EXPRESION -> EXP OP_REL EXPRESION
          -> EXP

EXP -> TERMINO OP_ARIT_SEC EXP
    -> TERMINO

TERMINO -> FACTOR OP_ARIT_PRIM TERMINO
        -> FACTOR

FACTOR -> LP SUPER_EXP RP
       -> VAR_CTE
       -> VARIABLE
       -> FUNCION

VAR_CTE -> cte_i
        -> cte_f
        -> cte_string

VARIABLE -> id [ super_exp ] [ super_exp ]
         -> id [ super_exp ]
         -> id . id ( VARIABLE_UAX )
         -> id . id
         -> id